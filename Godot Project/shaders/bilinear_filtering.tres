[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

/*
This can be used to keep pixels well defined at higher resolutions. Integer
values will work best. Should only be greater than or equal to 1.
*/
uniform float pixel_scale = 1.0;

// Based on https://en.wikipedia.org/wiki/Bilinear_filtering
void fragment()
{
	vec2 textureSize = vec2(textureSize(TEXTURE, 0)) * pixel_scale;
	vec2 texturePosition = UV * textureSize - vec2(0.5);
	float x1 = floor(texturePosition.x);
	float xFrac = texturePosition.x - x1;
	float y1 = floor(texturePosition.y);
	float yFrac = texturePosition.y - y1;
	float x2 = x1 + 1.0;
	float y2 = y1 + 1.0;

	float x1Uv = (x1 + 0.5)/textureSize.x;
	float y1Uv = (y1 + 0.5)/textureSize.y;
	float x2Uv = (x2 + 0.5)/textureSize.x;
	float y2Uv = (y2 + 0.5)/textureSize.y;

	vec3 z11 = texture(TEXTURE, vec2(x1Uv, y1Uv)).rgb;
	vec3 z12 = texture(TEXTURE, vec2(x1Uv, y2Uv)).rgb;
	vec3 z21 = texture(TEXTURE, vec2(x2Uv, y1Uv)).rgb;
	vec3 z22 = texture(TEXTURE, vec2(x2Uv, y2Uv)).rgb;

	vec3 f1Result = z11 + yFrac * (z12 - z11);
	vec3 f2Result = z21 + yFrac * (z22 - z21);

	COLOR.rgb = f1Result + xFrac * (f2Result - f1Result);
}
"
